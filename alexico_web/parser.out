Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    MENOS

Grammar

Rule 0     S' -> program
Rule 1     program -> for_loop
Rule 2     for_loop -> FOR LPAREN INT IDENTIFIER EQUALS NUMBER SEMICOLON IDENTIFIER LESS_EQUAL NUMBER SEMICOLON increment RPAREN LBRACE statement RBRACE
Rule 3     increment -> IDENTIFIER PLUS_PLUS
Rule 4     increment -> IDENTIFIER PLUS EQUALS NUMBER
Rule 5     statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN STRING PLUS IDENTIFIER RPAREN SEMICOLON

Terminals, with rules where they appear

DOT                  : 5 5
EQUALS               : 2 4
FOR                  : 2
IDENTIFIER           : 2 2 3 4 5
INT                  : 2
LBRACE               : 2
LESS_EQUAL           : 2
LPAREN               : 2 5
MENOS                : 
NUMBER               : 2 2 4
OUT                  : 5
PLUS                 : 4 5
PLUS_PLUS            : 3
PRINTLN              : 5
RBRACE               : 2
RPAREN               : 2 5
SEMICOLON            : 2 2 5
STRING               : 5
SYSTEM               : 5
error                : 

Nonterminals, with rules where they appear

for_loop             : 1
increment            : 2
program              : 0
statement            : 2

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . for_loop
    (2) for_loop -> . FOR LPAREN INT IDENTIFIER EQUALS NUMBER SEMICOLON IDENTIFIER LESS_EQUAL NUMBER SEMICOLON increment RPAREN LBRACE statement RBRACE

    FOR             shift and go to state 3

    program                        shift and go to state 1
    for_loop                       shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> for_loop .

    $end            reduce using rule 1 (program -> for_loop .)


state 3

    (2) for_loop -> FOR . LPAREN INT IDENTIFIER EQUALS NUMBER SEMICOLON IDENTIFIER LESS_EQUAL NUMBER SEMICOLON increment RPAREN LBRACE statement RBRACE

    LPAREN          shift and go to state 4


state 4

    (2) for_loop -> FOR LPAREN . INT IDENTIFIER EQUALS NUMBER SEMICOLON IDENTIFIER LESS_EQUAL NUMBER SEMICOLON increment RPAREN LBRACE statement RBRACE

    INT             shift and go to state 5


state 5

    (2) for_loop -> FOR LPAREN INT . IDENTIFIER EQUALS NUMBER SEMICOLON IDENTIFIER LESS_EQUAL NUMBER SEMICOLON increment RPAREN LBRACE statement RBRACE

    IDENTIFIER      shift and go to state 6


state 6

    (2) for_loop -> FOR LPAREN INT IDENTIFIER . EQUALS NUMBER SEMICOLON IDENTIFIER LESS_EQUAL NUMBER SEMICOLON increment RPAREN LBRACE statement RBRACE

    EQUALS          shift and go to state 7


state 7

    (2) for_loop -> FOR LPAREN INT IDENTIFIER EQUALS . NUMBER SEMICOLON IDENTIFIER LESS_EQUAL NUMBER SEMICOLON increment RPAREN LBRACE statement RBRACE

    NUMBER          shift and go to state 8


state 8

    (2) for_loop -> FOR LPAREN INT IDENTIFIER EQUALS NUMBER . SEMICOLON IDENTIFIER LESS_EQUAL NUMBER SEMICOLON increment RPAREN LBRACE statement RBRACE

    SEMICOLON       shift and go to state 9


state 9

    (2) for_loop -> FOR LPAREN INT IDENTIFIER EQUALS NUMBER SEMICOLON . IDENTIFIER LESS_EQUAL NUMBER SEMICOLON increment RPAREN LBRACE statement RBRACE

    IDENTIFIER      shift and go to state 10


state 10

    (2) for_loop -> FOR LPAREN INT IDENTIFIER EQUALS NUMBER SEMICOLON IDENTIFIER . LESS_EQUAL NUMBER SEMICOLON increment RPAREN LBRACE statement RBRACE

    LESS_EQUAL      shift and go to state 11


state 11

    (2) for_loop -> FOR LPAREN INT IDENTIFIER EQUALS NUMBER SEMICOLON IDENTIFIER LESS_EQUAL . NUMBER SEMICOLON increment RPAREN LBRACE statement RBRACE

    NUMBER          shift and go to state 12


state 12

    (2) for_loop -> FOR LPAREN INT IDENTIFIER EQUALS NUMBER SEMICOLON IDENTIFIER LESS_EQUAL NUMBER . SEMICOLON increment RPAREN LBRACE statement RBRACE

    SEMICOLON       shift and go to state 13


state 13

    (2) for_loop -> FOR LPAREN INT IDENTIFIER EQUALS NUMBER SEMICOLON IDENTIFIER LESS_EQUAL NUMBER SEMICOLON . increment RPAREN LBRACE statement RBRACE
    (3) increment -> . IDENTIFIER PLUS_PLUS
    (4) increment -> . IDENTIFIER PLUS EQUALS NUMBER

    IDENTIFIER      shift and go to state 14

    increment                      shift and go to state 15

state 14

    (3) increment -> IDENTIFIER . PLUS_PLUS
    (4) increment -> IDENTIFIER . PLUS EQUALS NUMBER

    PLUS_PLUS       shift and go to state 16
    PLUS            shift and go to state 17


state 15

    (2) for_loop -> FOR LPAREN INT IDENTIFIER EQUALS NUMBER SEMICOLON IDENTIFIER LESS_EQUAL NUMBER SEMICOLON increment . RPAREN LBRACE statement RBRACE

    RPAREN          shift and go to state 18


state 16

    (3) increment -> IDENTIFIER PLUS_PLUS .

    RPAREN          reduce using rule 3 (increment -> IDENTIFIER PLUS_PLUS .)


state 17

    (4) increment -> IDENTIFIER PLUS . EQUALS NUMBER

    EQUALS          shift and go to state 19


state 18

    (2) for_loop -> FOR LPAREN INT IDENTIFIER EQUALS NUMBER SEMICOLON IDENTIFIER LESS_EQUAL NUMBER SEMICOLON increment RPAREN . LBRACE statement RBRACE

    LBRACE          shift and go to state 20


state 19

    (4) increment -> IDENTIFIER PLUS EQUALS . NUMBER

    NUMBER          shift and go to state 21


state 20

    (2) for_loop -> FOR LPAREN INT IDENTIFIER EQUALS NUMBER SEMICOLON IDENTIFIER LESS_EQUAL NUMBER SEMICOLON increment RPAREN LBRACE . statement RBRACE
    (5) statement -> . SYSTEM DOT OUT DOT PRINTLN LPAREN STRING PLUS IDENTIFIER RPAREN SEMICOLON

    SYSTEM          shift and go to state 23

    statement                      shift and go to state 22

state 21

    (4) increment -> IDENTIFIER PLUS EQUALS NUMBER .

    RPAREN          reduce using rule 4 (increment -> IDENTIFIER PLUS EQUALS NUMBER .)


state 22

    (2) for_loop -> FOR LPAREN INT IDENTIFIER EQUALS NUMBER SEMICOLON IDENTIFIER LESS_EQUAL NUMBER SEMICOLON increment RPAREN LBRACE statement . RBRACE

    RBRACE          shift and go to state 24


state 23

    (5) statement -> SYSTEM . DOT OUT DOT PRINTLN LPAREN STRING PLUS IDENTIFIER RPAREN SEMICOLON

    DOT             shift and go to state 25


state 24

    (2) for_loop -> FOR LPAREN INT IDENTIFIER EQUALS NUMBER SEMICOLON IDENTIFIER LESS_EQUAL NUMBER SEMICOLON increment RPAREN LBRACE statement RBRACE .

    $end            reduce using rule 2 (for_loop -> FOR LPAREN INT IDENTIFIER EQUALS NUMBER SEMICOLON IDENTIFIER LESS_EQUAL NUMBER SEMICOLON increment RPAREN LBRACE statement RBRACE .)


state 25

    (5) statement -> SYSTEM DOT . OUT DOT PRINTLN LPAREN STRING PLUS IDENTIFIER RPAREN SEMICOLON

    OUT             shift and go to state 26


state 26

    (5) statement -> SYSTEM DOT OUT . DOT PRINTLN LPAREN STRING PLUS IDENTIFIER RPAREN SEMICOLON

    DOT             shift and go to state 27


state 27

    (5) statement -> SYSTEM DOT OUT DOT . PRINTLN LPAREN STRING PLUS IDENTIFIER RPAREN SEMICOLON

    PRINTLN         shift and go to state 28


state 28

    (5) statement -> SYSTEM DOT OUT DOT PRINTLN . LPAREN STRING PLUS IDENTIFIER RPAREN SEMICOLON

    LPAREN          shift and go to state 29


state 29

    (5) statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN . STRING PLUS IDENTIFIER RPAREN SEMICOLON

    STRING          shift and go to state 30


state 30

    (5) statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN STRING . PLUS IDENTIFIER RPAREN SEMICOLON

    PLUS            shift and go to state 31


state 31

    (5) statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN STRING PLUS . IDENTIFIER RPAREN SEMICOLON

    IDENTIFIER      shift and go to state 32


state 32

    (5) statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN STRING PLUS IDENTIFIER . RPAREN SEMICOLON

    RPAREN          shift and go to state 33


state 33

    (5) statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN STRING PLUS IDENTIFIER RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 34


state 34

    (5) statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN STRING PLUS IDENTIFIER RPAREN SEMICOLON .

    RBRACE          reduce using rule 5 (statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN STRING PLUS IDENTIFIER RPAREN SEMICOLON .)

